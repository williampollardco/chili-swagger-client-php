<?php
/**
 * SettingsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rest API v1.2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SettingsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SettingsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation restApiDataSourceAddSampleFile
     *
     * DataSourceAddSampleFile
     *
     * @param  string $data_source_id The DataSource for which to return the sample files (required)
     * @param  string $file_name The name of the new file (required)
     * @param  \Swagger\Client\Model\DataSourceAddSampleFileBodyWrapper $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiDataSourceAddSampleFile($data_source_id, $file_name, $body)
    {
        list($response) = $this->restApiDataSourceAddSampleFileWithHttpInfo($data_source_id, $file_name, $body);
        return $response;
    }

    /**
     * Operation restApiDataSourceAddSampleFileWithHttpInfo
     *
     * DataSourceAddSampleFile
     *
     * @param  string $data_source_id The DataSource for which to return the sample files (required)
     * @param  string $file_name The name of the new file (required)
     * @param  \Swagger\Client\Model\DataSourceAddSampleFileBodyWrapper $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiDataSourceAddSampleFileWithHttpInfo($data_source_id, $file_name, $body)
    {
        $returnType = 'object';
        $request = $this->restApiDataSourceAddSampleFileRequest($data_source_id, $file_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiDataSourceAddSampleFileAsync
     *
     * DataSourceAddSampleFile
     *
     * @param  string $data_source_id The DataSource for which to return the sample files (required)
     * @param  string $file_name The name of the new file (required)
     * @param  \Swagger\Client\Model\DataSourceAddSampleFileBodyWrapper $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiDataSourceAddSampleFileAsync($data_source_id, $file_name, $body)
    {
        return $this->restApiDataSourceAddSampleFileAsyncWithHttpInfo($data_source_id, $file_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiDataSourceAddSampleFileAsyncWithHttpInfo
     *
     * DataSourceAddSampleFile
     *
     * @param  string $data_source_id The DataSource for which to return the sample files (required)
     * @param  string $file_name The name of the new file (required)
     * @param  \Swagger\Client\Model\DataSourceAddSampleFileBodyWrapper $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiDataSourceAddSampleFileAsyncWithHttpInfo($data_source_id, $file_name, $body)
    {
        $returnType = 'object';
        $request = $this->restApiDataSourceAddSampleFileRequest($data_source_id, $file_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiDataSourceAddSampleFile'
     *
     * @param  string $data_source_id The DataSource for which to return the sample files (required)
     * @param  string $file_name The name of the new file (required)
     * @param  \Swagger\Client\Model\DataSourceAddSampleFileBodyWrapper $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiDataSourceAddSampleFileRequest($data_source_id, $file_name, $body)
    {
        // verify the required parameter 'data_source_id' is set
        if ($data_source_id === null || (is_array($data_source_id) && count($data_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_source_id when calling restApiDataSourceAddSampleFile'
            );
        }
        // verify the required parameter 'file_name' is set
        if ($file_name === null || (is_array($file_name) && count($file_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name when calling restApiDataSourceAddSampleFile'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling restApiDataSourceAddSampleFile'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/datasources/{dataSourceID}/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($file_name !== null) {
            $queryParams['fileName'] = ObjectSerializer::toQueryValue($file_name);
        }

        // path params
        if ($data_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dataSourceID' . '}',
                ObjectSerializer::toPathValue($data_source_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiDataSourceDeleteSampleFile
     *
     * DataSourceDeleteSampleFile
     *
     * @param  string $data_source_id The DataSource for which to return the sample files (required)
     * @param  string $file_name The name of the file to delete (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiDataSourceDeleteSampleFile($data_source_id, $file_name)
    {
        list($response) = $this->restApiDataSourceDeleteSampleFileWithHttpInfo($data_source_id, $file_name);
        return $response;
    }

    /**
     * Operation restApiDataSourceDeleteSampleFileWithHttpInfo
     *
     * DataSourceDeleteSampleFile
     *
     * @param  string $data_source_id The DataSource for which to return the sample files (required)
     * @param  string $file_name The name of the file to delete (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiDataSourceDeleteSampleFileWithHttpInfo($data_source_id, $file_name)
    {
        $returnType = 'object';
        $request = $this->restApiDataSourceDeleteSampleFileRequest($data_source_id, $file_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiDataSourceDeleteSampleFileAsync
     *
     * DataSourceDeleteSampleFile
     *
     * @param  string $data_source_id The DataSource for which to return the sample files (required)
     * @param  string $file_name The name of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiDataSourceDeleteSampleFileAsync($data_source_id, $file_name)
    {
        return $this->restApiDataSourceDeleteSampleFileAsyncWithHttpInfo($data_source_id, $file_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiDataSourceDeleteSampleFileAsyncWithHttpInfo
     *
     * DataSourceDeleteSampleFile
     *
     * @param  string $data_source_id The DataSource for which to return the sample files (required)
     * @param  string $file_name The name of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiDataSourceDeleteSampleFileAsyncWithHttpInfo($data_source_id, $file_name)
    {
        $returnType = 'object';
        $request = $this->restApiDataSourceDeleteSampleFileRequest($data_source_id, $file_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiDataSourceDeleteSampleFile'
     *
     * @param  string $data_source_id The DataSource for which to return the sample files (required)
     * @param  string $file_name The name of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiDataSourceDeleteSampleFileRequest($data_source_id, $file_name)
    {
        // verify the required parameter 'data_source_id' is set
        if ($data_source_id === null || (is_array($data_source_id) && count($data_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_source_id when calling restApiDataSourceDeleteSampleFile'
            );
        }
        // verify the required parameter 'file_name' is set
        if ($file_name === null || (is_array($file_name) && count($file_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name when calling restApiDataSourceDeleteSampleFile'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/datasources/{dataSourceID}/samplefiles/{fileName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($data_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dataSourceID' . '}',
                ObjectSerializer::toPathValue($data_source_id),
                $resourcePath
            );
        }
        // path params
        if ($file_name !== null) {
            $resourcePath = str_replace(
                '{' . 'fileName' . '}',
                ObjectSerializer::toPathValue($file_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiDataSourceDownloadSpreadsheets
     *
     * DataSourceDownloadSpreadsheets
     *
     * @param  string $data_source_id The ID for the datasource (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiDataSourceDownloadSpreadsheets($data_source_id)
    {
        list($response) = $this->restApiDataSourceDownloadSpreadsheetsWithHttpInfo($data_source_id);
        return $response;
    }

    /**
     * Operation restApiDataSourceDownloadSpreadsheetsWithHttpInfo
     *
     * DataSourceDownloadSpreadsheets
     *
     * @param  string $data_source_id The ID for the datasource (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiDataSourceDownloadSpreadsheetsWithHttpInfo($data_source_id)
    {
        $returnType = 'object';
        $request = $this->restApiDataSourceDownloadSpreadsheetsRequest($data_source_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiDataSourceDownloadSpreadsheetsAsync
     *
     * DataSourceDownloadSpreadsheets
     *
     * @param  string $data_source_id The ID for the datasource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiDataSourceDownloadSpreadsheetsAsync($data_source_id)
    {
        return $this->restApiDataSourceDownloadSpreadsheetsAsyncWithHttpInfo($data_source_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiDataSourceDownloadSpreadsheetsAsyncWithHttpInfo
     *
     * DataSourceDownloadSpreadsheets
     *
     * @param  string $data_source_id The ID for the datasource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiDataSourceDownloadSpreadsheetsAsyncWithHttpInfo($data_source_id)
    {
        $returnType = 'object';
        $request = $this->restApiDataSourceDownloadSpreadsheetsRequest($data_source_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiDataSourceDownloadSpreadsheets'
     *
     * @param  string $data_source_id The ID for the datasource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiDataSourceDownloadSpreadsheetsRequest($data_source_id)
    {
        // verify the required parameter 'data_source_id' is set
        if ($data_source_id === null || (is_array($data_source_id) && count($data_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_source_id when calling restApiDataSourceDownloadSpreadsheets'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/datasources/{dataSourceID}/spreadsheets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($data_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dataSourceID' . '}',
                ObjectSerializer::toPathValue($data_source_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiDataSourceDownloadURL
     *
     * DataSourceDownloadURL
     *
     * @param  string $data_source_id ID of the DataSource ResourceItem (required)
     * @param  string $url_type The type of url to download (&#39;main&#39; or &#39;query&#39;) (required)
     * @param  string $query If urlType is &#39;main&#39;, the query will be replaced in the main URL (based on the pattern &#39;%QUERY%&#39;) (optional)
     * @param  string $for_document_id Document ID for which the download takes place (used to replace the %doc_id% pattern in the URL) (optional)
     * @param  string $editor_query_string The querystring for the Editor (used to replace variables in the external URL) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiDataSourceDownloadURL($data_source_id, $url_type, $query = null, $for_document_id = null, $editor_query_string = null)
    {
        list($response) = $this->restApiDataSourceDownloadURLWithHttpInfo($data_source_id, $url_type, $query, $for_document_id, $editor_query_string);
        return $response;
    }

    /**
     * Operation restApiDataSourceDownloadURLWithHttpInfo
     *
     * DataSourceDownloadURL
     *
     * @param  string $data_source_id ID of the DataSource ResourceItem (required)
     * @param  string $url_type The type of url to download (&#39;main&#39; or &#39;query&#39;) (required)
     * @param  string $query If urlType is &#39;main&#39;, the query will be replaced in the main URL (based on the pattern &#39;%QUERY%&#39;) (optional)
     * @param  string $for_document_id Document ID for which the download takes place (used to replace the %doc_id% pattern in the URL) (optional)
     * @param  string $editor_query_string The querystring for the Editor (used to replace variables in the external URL) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiDataSourceDownloadURLWithHttpInfo($data_source_id, $url_type, $query = null, $for_document_id = null, $editor_query_string = null)
    {
        $returnType = 'object';
        $request = $this->restApiDataSourceDownloadURLRequest($data_source_id, $url_type, $query, $for_document_id, $editor_query_string);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiDataSourceDownloadURLAsync
     *
     * DataSourceDownloadURL
     *
     * @param  string $data_source_id ID of the DataSource ResourceItem (required)
     * @param  string $url_type The type of url to download (&#39;main&#39; or &#39;query&#39;) (required)
     * @param  string $query If urlType is &#39;main&#39;, the query will be replaced in the main URL (based on the pattern &#39;%QUERY%&#39;) (optional)
     * @param  string $for_document_id Document ID for which the download takes place (used to replace the %doc_id% pattern in the URL) (optional)
     * @param  string $editor_query_string The querystring for the Editor (used to replace variables in the external URL) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiDataSourceDownloadURLAsync($data_source_id, $url_type, $query = null, $for_document_id = null, $editor_query_string = null)
    {
        return $this->restApiDataSourceDownloadURLAsyncWithHttpInfo($data_source_id, $url_type, $query, $for_document_id, $editor_query_string)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiDataSourceDownloadURLAsyncWithHttpInfo
     *
     * DataSourceDownloadURL
     *
     * @param  string $data_source_id ID of the DataSource ResourceItem (required)
     * @param  string $url_type The type of url to download (&#39;main&#39; or &#39;query&#39;) (required)
     * @param  string $query If urlType is &#39;main&#39;, the query will be replaced in the main URL (based on the pattern &#39;%QUERY%&#39;) (optional)
     * @param  string $for_document_id Document ID for which the download takes place (used to replace the %doc_id% pattern in the URL) (optional)
     * @param  string $editor_query_string The querystring for the Editor (used to replace variables in the external URL) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiDataSourceDownloadURLAsyncWithHttpInfo($data_source_id, $url_type, $query = null, $for_document_id = null, $editor_query_string = null)
    {
        $returnType = 'object';
        $request = $this->restApiDataSourceDownloadURLRequest($data_source_id, $url_type, $query, $for_document_id, $editor_query_string);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiDataSourceDownloadURL'
     *
     * @param  string $data_source_id ID of the DataSource ResourceItem (required)
     * @param  string $url_type The type of url to download (&#39;main&#39; or &#39;query&#39;) (required)
     * @param  string $query If urlType is &#39;main&#39;, the query will be replaced in the main URL (based on the pattern &#39;%QUERY%&#39;) (optional)
     * @param  string $for_document_id Document ID for which the download takes place (used to replace the %doc_id% pattern in the URL) (optional)
     * @param  string $editor_query_string The querystring for the Editor (used to replace variables in the external URL) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiDataSourceDownloadURLRequest($data_source_id, $url_type, $query = null, $for_document_id = null, $editor_query_string = null)
    {
        // verify the required parameter 'data_source_id' is set
        if ($data_source_id === null || (is_array($data_source_id) && count($data_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_source_id when calling restApiDataSourceDownloadURL'
            );
        }
        // verify the required parameter 'url_type' is set
        if ($url_type === null || (is_array($url_type) && count($url_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url_type when calling restApiDataSourceDownloadURL'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/datasources/{dataSourceID}/downloadurl';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($url_type !== null) {
            $queryParams['urlType'] = ObjectSerializer::toQueryValue($url_type);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = ObjectSerializer::toQueryValue($query);
        }
        // query params
        if ($for_document_id !== null) {
            $queryParams['forDocumentID'] = ObjectSerializer::toQueryValue($for_document_id);
        }
        // query params
        if ($editor_query_string !== null) {
            $queryParams['editorQueryString'] = ObjectSerializer::toQueryValue($editor_query_string);
        }

        // path params
        if ($data_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dataSourceID' . '}',
                ObjectSerializer::toPathValue($data_source_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiDataSourceFileGetXML
     *
     * DataSourceFileGetXML
     *
     * @param  string $data_source_id The DataSource for which the settings are used (required)
     * @param  \Swagger\Client\Model\DataSourceFileGetXMLBodyWrapper $body  (required)
     * @param  string $file_extension The extension (csv, txt, ...) of the file to convert. If a file path is provided, this argument is optional (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiDataSourceFileGetXML($data_source_id, $body, $file_extension = null)
    {
        list($response) = $this->restApiDataSourceFileGetXMLWithHttpInfo($data_source_id, $body, $file_extension);
        return $response;
    }

    /**
     * Operation restApiDataSourceFileGetXMLWithHttpInfo
     *
     * DataSourceFileGetXML
     *
     * @param  string $data_source_id The DataSource for which the settings are used (required)
     * @param  \Swagger\Client\Model\DataSourceFileGetXMLBodyWrapper $body  (required)
     * @param  string $file_extension The extension (csv, txt, ...) of the file to convert. If a file path is provided, this argument is optional (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiDataSourceFileGetXMLWithHttpInfo($data_source_id, $body, $file_extension = null)
    {
        $returnType = 'object';
        $request = $this->restApiDataSourceFileGetXMLRequest($data_source_id, $body, $file_extension);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiDataSourceFileGetXMLAsync
     *
     * DataSourceFileGetXML
     *
     * @param  string $data_source_id The DataSource for which the settings are used (required)
     * @param  \Swagger\Client\Model\DataSourceFileGetXMLBodyWrapper $body  (required)
     * @param  string $file_extension The extension (csv, txt, ...) of the file to convert. If a file path is provided, this argument is optional (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiDataSourceFileGetXMLAsync($data_source_id, $body, $file_extension = null)
    {
        return $this->restApiDataSourceFileGetXMLAsyncWithHttpInfo($data_source_id, $body, $file_extension)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiDataSourceFileGetXMLAsyncWithHttpInfo
     *
     * DataSourceFileGetXML
     *
     * @param  string $data_source_id The DataSource for which the settings are used (required)
     * @param  \Swagger\Client\Model\DataSourceFileGetXMLBodyWrapper $body  (required)
     * @param  string $file_extension The extension (csv, txt, ...) of the file to convert. If a file path is provided, this argument is optional (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiDataSourceFileGetXMLAsyncWithHttpInfo($data_source_id, $body, $file_extension = null)
    {
        $returnType = 'object';
        $request = $this->restApiDataSourceFileGetXMLRequest($data_source_id, $body, $file_extension);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiDataSourceFileGetXML'
     *
     * @param  string $data_source_id The DataSource for which the settings are used (required)
     * @param  \Swagger\Client\Model\DataSourceFileGetXMLBodyWrapper $body  (required)
     * @param  string $file_extension The extension (csv, txt, ...) of the file to convert. If a file path is provided, this argument is optional (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiDataSourceFileGetXMLRequest($data_source_id, $body, $file_extension = null)
    {
        // verify the required parameter 'data_source_id' is set
        if ($data_source_id === null || (is_array($data_source_id) && count($data_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_source_id when calling restApiDataSourceFileGetXML'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling restApiDataSourceFileGetXML'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/datasources/{dataSourceID}/xmlconverter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($file_extension !== null) {
            $queryParams['fileExtension'] = ObjectSerializer::toQueryValue($file_extension);
        }

        // path params
        if ($data_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dataSourceID' . '}',
                ObjectSerializer::toPathValue($data_source_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiDataSourceListSampleFiles
     *
     * DataSourceListSampleFiles
     *
     * @param  string $data_source_id The DataSource for which to return the sample files (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiDataSourceListSampleFiles($data_source_id)
    {
        list($response) = $this->restApiDataSourceListSampleFilesWithHttpInfo($data_source_id);
        return $response;
    }

    /**
     * Operation restApiDataSourceListSampleFilesWithHttpInfo
     *
     * DataSourceListSampleFiles
     *
     * @param  string $data_source_id The DataSource for which to return the sample files (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiDataSourceListSampleFilesWithHttpInfo($data_source_id)
    {
        $returnType = 'object';
        $request = $this->restApiDataSourceListSampleFilesRequest($data_source_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiDataSourceListSampleFilesAsync
     *
     * DataSourceListSampleFiles
     *
     * @param  string $data_source_id The DataSource for which to return the sample files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiDataSourceListSampleFilesAsync($data_source_id)
    {
        return $this->restApiDataSourceListSampleFilesAsyncWithHttpInfo($data_source_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiDataSourceListSampleFilesAsyncWithHttpInfo
     *
     * DataSourceListSampleFiles
     *
     * @param  string $data_source_id The DataSource for which to return the sample files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiDataSourceListSampleFilesAsyncWithHttpInfo($data_source_id)
    {
        $returnType = 'object';
        $request = $this->restApiDataSourceListSampleFilesRequest($data_source_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiDataSourceListSampleFiles'
     *
     * @param  string $data_source_id The DataSource for which to return the sample files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiDataSourceListSampleFilesRequest($data_source_id)
    {
        // verify the required parameter 'data_source_id' is set
        if ($data_source_id === null || (is_array($data_source_id) && count($data_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_source_id when calling restApiDataSourceListSampleFiles'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/datasources/{dataSourceID}/samplefiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($data_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dataSourceID' . '}',
                ObjectSerializer::toPathValue($data_source_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiDataSourceSalesForceGetXML
     *
     * DataSourceSalesForceGetXML
     *
     * @param  string $data_source_id The ID for the datasource (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiDataSourceSalesForceGetXML($data_source_id)
    {
        list($response) = $this->restApiDataSourceSalesForceGetXMLWithHttpInfo($data_source_id);
        return $response;
    }

    /**
     * Operation restApiDataSourceSalesForceGetXMLWithHttpInfo
     *
     * DataSourceSalesForceGetXML
     *
     * @param  string $data_source_id The ID for the datasource (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiDataSourceSalesForceGetXMLWithHttpInfo($data_source_id)
    {
        $returnType = 'object';
        $request = $this->restApiDataSourceSalesForceGetXMLRequest($data_source_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiDataSourceSalesForceGetXMLAsync
     *
     * DataSourceSalesForceGetXML
     *
     * @param  string $data_source_id The ID for the datasource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiDataSourceSalesForceGetXMLAsync($data_source_id)
    {
        return $this->restApiDataSourceSalesForceGetXMLAsyncWithHttpInfo($data_source_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiDataSourceSalesForceGetXMLAsyncWithHttpInfo
     *
     * DataSourceSalesForceGetXML
     *
     * @param  string $data_source_id The ID for the datasource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiDataSourceSalesForceGetXMLAsyncWithHttpInfo($data_source_id)
    {
        $returnType = 'object';
        $request = $this->restApiDataSourceSalesForceGetXMLRequest($data_source_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiDataSourceSalesForceGetXML'
     *
     * @param  string $data_source_id The ID for the datasource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiDataSourceSalesForceGetXMLRequest($data_source_id)
    {
        // verify the required parameter 'data_source_id' is set
        if ($data_source_id === null || (is_array($data_source_id) && count($data_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_source_id when calling restApiDataSourceSalesForceGetXML'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/datasources/{dataSourceID}/salesforce';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($data_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dataSourceID' . '}',
                ObjectSerializer::toPathValue($data_source_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiDataSourceSpreadsheetGetXML
     *
     * DataSourceSpreadsheetGetXML
     *
     * @param  string $data_source_id The ID for the datasource (required)
     * @param  \Swagger\Client\Model\DataSourceSpreadsheetGetXMLBodyWrapper $body  (required)
     * @param  string $spreadsheet_id spreadsheet_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiDataSourceSpreadsheetGetXML($data_source_id, $body, $spreadsheet_id)
    {
        list($response) = $this->restApiDataSourceSpreadsheetGetXMLWithHttpInfo($data_source_id, $body, $spreadsheet_id);
        return $response;
    }

    /**
     * Operation restApiDataSourceSpreadsheetGetXMLWithHttpInfo
     *
     * DataSourceSpreadsheetGetXML
     *
     * @param  string $data_source_id The ID for the datasource (required)
     * @param  \Swagger\Client\Model\DataSourceSpreadsheetGetXMLBodyWrapper $body  (required)
     * @param  string $spreadsheet_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiDataSourceSpreadsheetGetXMLWithHttpInfo($data_source_id, $body, $spreadsheet_id)
    {
        $returnType = 'object';
        $request = $this->restApiDataSourceSpreadsheetGetXMLRequest($data_source_id, $body, $spreadsheet_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiDataSourceSpreadsheetGetXMLAsync
     *
     * DataSourceSpreadsheetGetXML
     *
     * @param  string $data_source_id The ID for the datasource (required)
     * @param  \Swagger\Client\Model\DataSourceSpreadsheetGetXMLBodyWrapper $body  (required)
     * @param  string $spreadsheet_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiDataSourceSpreadsheetGetXMLAsync($data_source_id, $body, $spreadsheet_id)
    {
        return $this->restApiDataSourceSpreadsheetGetXMLAsyncWithHttpInfo($data_source_id, $body, $spreadsheet_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiDataSourceSpreadsheetGetXMLAsyncWithHttpInfo
     *
     * DataSourceSpreadsheetGetXML
     *
     * @param  string $data_source_id The ID for the datasource (required)
     * @param  \Swagger\Client\Model\DataSourceSpreadsheetGetXMLBodyWrapper $body  (required)
     * @param  string $spreadsheet_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiDataSourceSpreadsheetGetXMLAsyncWithHttpInfo($data_source_id, $body, $spreadsheet_id)
    {
        $returnType = 'object';
        $request = $this->restApiDataSourceSpreadsheetGetXMLRequest($data_source_id, $body, $spreadsheet_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiDataSourceSpreadsheetGetXML'
     *
     * @param  string $data_source_id The ID for the datasource (required)
     * @param  \Swagger\Client\Model\DataSourceSpreadsheetGetXMLBodyWrapper $body  (required)
     * @param  string $spreadsheet_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiDataSourceSpreadsheetGetXMLRequest($data_source_id, $body, $spreadsheet_id)
    {
        // verify the required parameter 'data_source_id' is set
        if ($data_source_id === null || (is_array($data_source_id) && count($data_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_source_id when calling restApiDataSourceSpreadsheetGetXML'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling restApiDataSourceSpreadsheetGetXML'
            );
        }
        // verify the required parameter 'spreadsheet_id' is set
        if ($spreadsheet_id === null || (is_array($spreadsheet_id) && count($spreadsheet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $spreadsheet_id when calling restApiDataSourceSpreadsheetGetXML'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/datasources/{dataSourceID}/spreadsheets/{spreadsheetID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($data_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dataSourceID' . '}',
                ObjectSerializer::toPathValue($data_source_id),
                $resourcePath
            );
        }
        // path params
        if ($spreadsheet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'spreadsheetID' . '}',
                ObjectSerializer::toPathValue($spreadsheet_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiDynamicAssetProviderGetTempAsset
     *
     * DynamicAssetProviderGetTempAsset
     *
     * @param  string $dynamic_asset_provider_id  (required)
     * @param  \Swagger\Client\Model\DynamicAssetProviderGetTempAssetBodyWrapper $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiDynamicAssetProviderGetTempAsset($dynamic_asset_provider_id, $body)
    {
        list($response) = $this->restApiDynamicAssetProviderGetTempAssetWithHttpInfo($dynamic_asset_provider_id, $body);
        return $response;
    }

    /**
     * Operation restApiDynamicAssetProviderGetTempAssetWithHttpInfo
     *
     * DynamicAssetProviderGetTempAsset
     *
     * @param  string $dynamic_asset_provider_id  (required)
     * @param  \Swagger\Client\Model\DynamicAssetProviderGetTempAssetBodyWrapper $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiDynamicAssetProviderGetTempAssetWithHttpInfo($dynamic_asset_provider_id, $body)
    {
        $returnType = 'object';
        $request = $this->restApiDynamicAssetProviderGetTempAssetRequest($dynamic_asset_provider_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiDynamicAssetProviderGetTempAssetAsync
     *
     * DynamicAssetProviderGetTempAsset
     *
     * @param  string $dynamic_asset_provider_id  (required)
     * @param  \Swagger\Client\Model\DynamicAssetProviderGetTempAssetBodyWrapper $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiDynamicAssetProviderGetTempAssetAsync($dynamic_asset_provider_id, $body)
    {
        return $this->restApiDynamicAssetProviderGetTempAssetAsyncWithHttpInfo($dynamic_asset_provider_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiDynamicAssetProviderGetTempAssetAsyncWithHttpInfo
     *
     * DynamicAssetProviderGetTempAsset
     *
     * @param  string $dynamic_asset_provider_id  (required)
     * @param  \Swagger\Client\Model\DynamicAssetProviderGetTempAssetBodyWrapper $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiDynamicAssetProviderGetTempAssetAsyncWithHttpInfo($dynamic_asset_provider_id, $body)
    {
        $returnType = 'object';
        $request = $this->restApiDynamicAssetProviderGetTempAssetRequest($dynamic_asset_provider_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiDynamicAssetProviderGetTempAsset'
     *
     * @param  string $dynamic_asset_provider_id  (required)
     * @param  \Swagger\Client\Model\DynamicAssetProviderGetTempAssetBodyWrapper $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiDynamicAssetProviderGetTempAssetRequest($dynamic_asset_provider_id, $body)
    {
        // verify the required parameter 'dynamic_asset_provider_id' is set
        if ($dynamic_asset_provider_id === null || (is_array($dynamic_asset_provider_id) && count($dynamic_asset_provider_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dynamic_asset_provider_id when calling restApiDynamicAssetProviderGetTempAsset'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling restApiDynamicAssetProviderGetTempAsset'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/dynamicassetproviders/{dynamicAssetProviderID}/tempasset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($dynamic_asset_provider_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dynamicAssetProviderID' . '}',
                ObjectSerializer::toPathValue($dynamic_asset_provider_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiFoldingSettingCreatePackage
     *
     * FoldingSettingCreatePackage
     *
     * @param  string $folding_setting_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiFoldingSettingCreatePackage($folding_setting_id)
    {
        list($response) = $this->restApiFoldingSettingCreatePackageWithHttpInfo($folding_setting_id);
        return $response;
    }

    /**
     * Operation restApiFoldingSettingCreatePackageWithHttpInfo
     *
     * FoldingSettingCreatePackage
     *
     * @param  string $folding_setting_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiFoldingSettingCreatePackageWithHttpInfo($folding_setting_id)
    {
        $returnType = 'object';
        $request = $this->restApiFoldingSettingCreatePackageRequest($folding_setting_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiFoldingSettingCreatePackageAsync
     *
     * FoldingSettingCreatePackage
     *
     * @param  string $folding_setting_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiFoldingSettingCreatePackageAsync($folding_setting_id)
    {
        return $this->restApiFoldingSettingCreatePackageAsyncWithHttpInfo($folding_setting_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiFoldingSettingCreatePackageAsyncWithHttpInfo
     *
     * FoldingSettingCreatePackage
     *
     * @param  string $folding_setting_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiFoldingSettingCreatePackageAsyncWithHttpInfo($folding_setting_id)
    {
        $returnType = 'object';
        $request = $this->restApiFoldingSettingCreatePackageRequest($folding_setting_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiFoldingSettingCreatePackage'
     *
     * @param  string $folding_setting_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiFoldingSettingCreatePackageRequest($folding_setting_id)
    {
        // verify the required parameter 'folding_setting_id' is set
        if ($folding_setting_id === null || (is_array($folding_setting_id) && count($folding_setting_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $folding_setting_id when calling restApiFoldingSettingCreatePackage'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/foldingsettings/{foldingSettingId}/package';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($folding_setting_id !== null) {
            $resourcePath = str_replace(
                '{' . 'foldingSettingId' . '}',
                ObjectSerializer::toPathValue($folding_setting_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiODTGetStyles
     *
     * ODTGetStyles
     *
     * @param  \Swagger\Client\Model\ODTGetStylesBodyWrapper $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiODTGetStyles($body)
    {
        list($response) = $this->restApiODTGetStylesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation restApiODTGetStylesWithHttpInfo
     *
     * ODTGetStyles
     *
     * @param  \Swagger\Client\Model\ODTGetStylesBodyWrapper $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiODTGetStylesWithHttpInfo($body)
    {
        $returnType = 'object';
        $request = $this->restApiODTGetStylesRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiODTGetStylesAsync
     *
     * ODTGetStyles
     *
     * @param  \Swagger\Client\Model\ODTGetStylesBodyWrapper $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiODTGetStylesAsync($body)
    {
        return $this->restApiODTGetStylesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiODTGetStylesAsyncWithHttpInfo
     *
     * ODTGetStyles
     *
     * @param  \Swagger\Client\Model\ODTGetStylesBodyWrapper $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiODTGetStylesAsyncWithHttpInfo($body)
    {
        $returnType = 'object';
        $request = $this->restApiODTGetStylesRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiODTGetStyles'
     *
     * @param  \Swagger\Client\Model\ODTGetStylesBodyWrapper $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiODTGetStylesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling restApiODTGetStyles'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/odt/styles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiODTGetTextFlow
     *
     * ODTGetTextFlow
     *
     * @param  \Swagger\Client\Model\ODTGetTextFlowBodyWrapper $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiODTGetTextFlow($body)
    {
        list($response) = $this->restApiODTGetTextFlowWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation restApiODTGetTextFlowWithHttpInfo
     *
     * ODTGetTextFlow
     *
     * @param  \Swagger\Client\Model\ODTGetTextFlowBodyWrapper $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiODTGetTextFlowWithHttpInfo($body)
    {
        $returnType = 'object';
        $request = $this->restApiODTGetTextFlowRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiODTGetTextFlowAsync
     *
     * ODTGetTextFlow
     *
     * @param  \Swagger\Client\Model\ODTGetTextFlowBodyWrapper $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiODTGetTextFlowAsync($body)
    {
        return $this->restApiODTGetTextFlowAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiODTGetTextFlowAsyncWithHttpInfo
     *
     * ODTGetTextFlow
     *
     * @param  \Swagger\Client\Model\ODTGetTextFlowBodyWrapper $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiODTGetTextFlowAsyncWithHttpInfo($body)
    {
        $returnType = 'object';
        $request = $this->restApiODTGetTextFlowRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiODTGetTextFlow'
     *
     * @param  \Swagger\Client\Model\ODTGetTextFlowBodyWrapper $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiODTGetTextFlowRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling restApiODTGetTextFlow'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/odt/textflow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiSwitchServerFlowGetCheckPoints
     *
     * SwitchServerFlowGetCheckPoints
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiSwitchServerFlowGetCheckPoints($switch_server_id, $flow_id)
    {
        list($response) = $this->restApiSwitchServerFlowGetCheckPointsWithHttpInfo($switch_server_id, $flow_id);
        return $response;
    }

    /**
     * Operation restApiSwitchServerFlowGetCheckPointsWithHttpInfo
     *
     * SwitchServerFlowGetCheckPoints
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiSwitchServerFlowGetCheckPointsWithHttpInfo($switch_server_id, $flow_id)
    {
        $returnType = 'object';
        $request = $this->restApiSwitchServerFlowGetCheckPointsRequest($switch_server_id, $flow_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiSwitchServerFlowGetCheckPointsAsync
     *
     * SwitchServerFlowGetCheckPoints
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiSwitchServerFlowGetCheckPointsAsync($switch_server_id, $flow_id)
    {
        return $this->restApiSwitchServerFlowGetCheckPointsAsyncWithHttpInfo($switch_server_id, $flow_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiSwitchServerFlowGetCheckPointsAsyncWithHttpInfo
     *
     * SwitchServerFlowGetCheckPoints
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiSwitchServerFlowGetCheckPointsAsyncWithHttpInfo($switch_server_id, $flow_id)
    {
        $returnType = 'object';
        $request = $this->restApiSwitchServerFlowGetCheckPointsRequest($switch_server_id, $flow_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiSwitchServerFlowGetCheckPoints'
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiSwitchServerFlowGetCheckPointsRequest($switch_server_id, $flow_id)
    {
        // verify the required parameter 'switch_server_id' is set
        if ($switch_server_id === null || (is_array($switch_server_id) && count($switch_server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_server_id when calling restApiSwitchServerFlowGetCheckPoints'
            );
        }
        // verify the required parameter 'flow_id' is set
        if ($flow_id === null || (is_array($flow_id) && count($flow_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flow_id when calling restApiSwitchServerFlowGetCheckPoints'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/switchservers/{switchServerID}/flows/{flowID}/checkpoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($switch_server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchServerID' . '}',
                ObjectSerializer::toPathValue($switch_server_id),
                $resourcePath
            );
        }
        // path params
        if ($flow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'flowID' . '}',
                ObjectSerializer::toPathValue($flow_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiSwitchServerFlowGetElementsJobCount
     *
     * SwitchServerFlowGetElementsJobCount
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiSwitchServerFlowGetElementsJobCount($switch_server_id, $flow_id)
    {
        list($response) = $this->restApiSwitchServerFlowGetElementsJobCountWithHttpInfo($switch_server_id, $flow_id);
        return $response;
    }

    /**
     * Operation restApiSwitchServerFlowGetElementsJobCountWithHttpInfo
     *
     * SwitchServerFlowGetElementsJobCount
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiSwitchServerFlowGetElementsJobCountWithHttpInfo($switch_server_id, $flow_id)
    {
        $returnType = 'object';
        $request = $this->restApiSwitchServerFlowGetElementsJobCountRequest($switch_server_id, $flow_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiSwitchServerFlowGetElementsJobCountAsync
     *
     * SwitchServerFlowGetElementsJobCount
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiSwitchServerFlowGetElementsJobCountAsync($switch_server_id, $flow_id)
    {
        return $this->restApiSwitchServerFlowGetElementsJobCountAsyncWithHttpInfo($switch_server_id, $flow_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiSwitchServerFlowGetElementsJobCountAsyncWithHttpInfo
     *
     * SwitchServerFlowGetElementsJobCount
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiSwitchServerFlowGetElementsJobCountAsyncWithHttpInfo($switch_server_id, $flow_id)
    {
        $returnType = 'object';
        $request = $this->restApiSwitchServerFlowGetElementsJobCountRequest($switch_server_id, $flow_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiSwitchServerFlowGetElementsJobCount'
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiSwitchServerFlowGetElementsJobCountRequest($switch_server_id, $flow_id)
    {
        // verify the required parameter 'switch_server_id' is set
        if ($switch_server_id === null || (is_array($switch_server_id) && count($switch_server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_server_id when calling restApiSwitchServerFlowGetElementsJobCount'
            );
        }
        // verify the required parameter 'flow_id' is set
        if ($flow_id === null || (is_array($flow_id) && count($flow_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flow_id when calling restApiSwitchServerFlowGetElementsJobCount'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/switchservers/{switchServerID}/flows/{flowID}/elementsjobcount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($switch_server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchServerID' . '}',
                ObjectSerializer::toPathValue($switch_server_id),
                $resourcePath
            );
        }
        // path params
        if ($flow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'flowID' . '}',
                ObjectSerializer::toPathValue($flow_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiSwitchServerFlowGetFullConfig
     *
     * SwitchServerFlowGetFullConfig
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiSwitchServerFlowGetFullConfig($switch_server_id, $flow_id)
    {
        list($response) = $this->restApiSwitchServerFlowGetFullConfigWithHttpInfo($switch_server_id, $flow_id);
        return $response;
    }

    /**
     * Operation restApiSwitchServerFlowGetFullConfigWithHttpInfo
     *
     * SwitchServerFlowGetFullConfig
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiSwitchServerFlowGetFullConfigWithHttpInfo($switch_server_id, $flow_id)
    {
        $returnType = 'object';
        $request = $this->restApiSwitchServerFlowGetFullConfigRequest($switch_server_id, $flow_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiSwitchServerFlowGetFullConfigAsync
     *
     * SwitchServerFlowGetFullConfig
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiSwitchServerFlowGetFullConfigAsync($switch_server_id, $flow_id)
    {
        return $this->restApiSwitchServerFlowGetFullConfigAsyncWithHttpInfo($switch_server_id, $flow_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiSwitchServerFlowGetFullConfigAsyncWithHttpInfo
     *
     * SwitchServerFlowGetFullConfig
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiSwitchServerFlowGetFullConfigAsyncWithHttpInfo($switch_server_id, $flow_id)
    {
        $returnType = 'object';
        $request = $this->restApiSwitchServerFlowGetFullConfigRequest($switch_server_id, $flow_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiSwitchServerFlowGetFullConfig'
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiSwitchServerFlowGetFullConfigRequest($switch_server_id, $flow_id)
    {
        // verify the required parameter 'switch_server_id' is set
        if ($switch_server_id === null || (is_array($switch_server_id) && count($switch_server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_server_id when calling restApiSwitchServerFlowGetFullConfig'
            );
        }
        // verify the required parameter 'flow_id' is set
        if ($flow_id === null || (is_array($flow_id) && count($flow_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flow_id when calling restApiSwitchServerFlowGetFullConfig'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/switchservers/{switchServerID}/flows/{flowID}/fullconfig';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($switch_server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchServerID' . '}',
                ObjectSerializer::toPathValue($switch_server_id),
                $resourcePath
            );
        }
        // path params
        if ($flow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'flowID' . '}',
                ObjectSerializer::toPathValue($flow_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiSwitchServerFlowGetJobs
     *
     * SwitchServerFlowGetJobs
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiSwitchServerFlowGetJobs($switch_server_id, $flow_id)
    {
        list($response) = $this->restApiSwitchServerFlowGetJobsWithHttpInfo($switch_server_id, $flow_id);
        return $response;
    }

    /**
     * Operation restApiSwitchServerFlowGetJobsWithHttpInfo
     *
     * SwitchServerFlowGetJobs
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiSwitchServerFlowGetJobsWithHttpInfo($switch_server_id, $flow_id)
    {
        $returnType = 'object';
        $request = $this->restApiSwitchServerFlowGetJobsRequest($switch_server_id, $flow_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiSwitchServerFlowGetJobsAsync
     *
     * SwitchServerFlowGetJobs
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiSwitchServerFlowGetJobsAsync($switch_server_id, $flow_id)
    {
        return $this->restApiSwitchServerFlowGetJobsAsyncWithHttpInfo($switch_server_id, $flow_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiSwitchServerFlowGetJobsAsyncWithHttpInfo
     *
     * SwitchServerFlowGetJobs
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiSwitchServerFlowGetJobsAsyncWithHttpInfo($switch_server_id, $flow_id)
    {
        $returnType = 'object';
        $request = $this->restApiSwitchServerFlowGetJobsRequest($switch_server_id, $flow_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiSwitchServerFlowGetJobs'
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiSwitchServerFlowGetJobsRequest($switch_server_id, $flow_id)
    {
        // verify the required parameter 'switch_server_id' is set
        if ($switch_server_id === null || (is_array($switch_server_id) && count($switch_server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_server_id when calling restApiSwitchServerFlowGetJobs'
            );
        }
        // verify the required parameter 'flow_id' is set
        if ($flow_id === null || (is_array($flow_id) && count($flow_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flow_id when calling restApiSwitchServerFlowGetJobs'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/switchservers/{switchServerID}/flows/{flowID}/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($switch_server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchServerID' . '}',
                ObjectSerializer::toPathValue($switch_server_id),
                $resourcePath
            );
        }
        // path params
        if ($flow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'flowID' . '}',
                ObjectSerializer::toPathValue($flow_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiSwitchServerFlowGetSubmitPoints
     *
     * SwitchServerFlowGetSubmitPoints
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiSwitchServerFlowGetSubmitPoints($switch_server_id, $flow_id)
    {
        list($response) = $this->restApiSwitchServerFlowGetSubmitPointsWithHttpInfo($switch_server_id, $flow_id);
        return $response;
    }

    /**
     * Operation restApiSwitchServerFlowGetSubmitPointsWithHttpInfo
     *
     * SwitchServerFlowGetSubmitPoints
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiSwitchServerFlowGetSubmitPointsWithHttpInfo($switch_server_id, $flow_id)
    {
        $returnType = 'object';
        $request = $this->restApiSwitchServerFlowGetSubmitPointsRequest($switch_server_id, $flow_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiSwitchServerFlowGetSubmitPointsAsync
     *
     * SwitchServerFlowGetSubmitPoints
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiSwitchServerFlowGetSubmitPointsAsync($switch_server_id, $flow_id)
    {
        return $this->restApiSwitchServerFlowGetSubmitPointsAsyncWithHttpInfo($switch_server_id, $flow_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiSwitchServerFlowGetSubmitPointsAsyncWithHttpInfo
     *
     * SwitchServerFlowGetSubmitPoints
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiSwitchServerFlowGetSubmitPointsAsyncWithHttpInfo($switch_server_id, $flow_id)
    {
        $returnType = 'object';
        $request = $this->restApiSwitchServerFlowGetSubmitPointsRequest($switch_server_id, $flow_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiSwitchServerFlowGetSubmitPoints'
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiSwitchServerFlowGetSubmitPointsRequest($switch_server_id, $flow_id)
    {
        // verify the required parameter 'switch_server_id' is set
        if ($switch_server_id === null || (is_array($switch_server_id) && count($switch_server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_server_id when calling restApiSwitchServerFlowGetSubmitPoints'
            );
        }
        // verify the required parameter 'flow_id' is set
        if ($flow_id === null || (is_array($flow_id) && count($flow_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flow_id when calling restApiSwitchServerFlowGetSubmitPoints'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/switchservers/{switchServerID}/flows/{flowID}/submitpoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($switch_server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchServerID' . '}',
                ObjectSerializer::toPathValue($switch_server_id),
                $resourcePath
            );
        }
        // path params
        if ($flow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'flowID' . '}',
                ObjectSerializer::toPathValue($flow_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiSwitchServerFlowSubmitFileToFolder
     *
     * SwitchServerFlowSubmitFileToFolder
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     * @param  string $element_id  (required)
     * @param  string $file_name  (required)
     * @param  \Swagger\Client\Model\SwitchServerFlowSubmitFileToFolderBodyWrapper $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiSwitchServerFlowSubmitFileToFolder($switch_server_id, $flow_id, $element_id, $file_name, $body)
    {
        list($response) = $this->restApiSwitchServerFlowSubmitFileToFolderWithHttpInfo($switch_server_id, $flow_id, $element_id, $file_name, $body);
        return $response;
    }

    /**
     * Operation restApiSwitchServerFlowSubmitFileToFolderWithHttpInfo
     *
     * SwitchServerFlowSubmitFileToFolder
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     * @param  string $element_id  (required)
     * @param  string $file_name  (required)
     * @param  \Swagger\Client\Model\SwitchServerFlowSubmitFileToFolderBodyWrapper $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiSwitchServerFlowSubmitFileToFolderWithHttpInfo($switch_server_id, $flow_id, $element_id, $file_name, $body)
    {
        $returnType = 'object';
        $request = $this->restApiSwitchServerFlowSubmitFileToFolderRequest($switch_server_id, $flow_id, $element_id, $file_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiSwitchServerFlowSubmitFileToFolderAsync
     *
     * SwitchServerFlowSubmitFileToFolder
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     * @param  string $element_id  (required)
     * @param  string $file_name  (required)
     * @param  \Swagger\Client\Model\SwitchServerFlowSubmitFileToFolderBodyWrapper $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiSwitchServerFlowSubmitFileToFolderAsync($switch_server_id, $flow_id, $element_id, $file_name, $body)
    {
        return $this->restApiSwitchServerFlowSubmitFileToFolderAsyncWithHttpInfo($switch_server_id, $flow_id, $element_id, $file_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiSwitchServerFlowSubmitFileToFolderAsyncWithHttpInfo
     *
     * SwitchServerFlowSubmitFileToFolder
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     * @param  string $element_id  (required)
     * @param  string $file_name  (required)
     * @param  \Swagger\Client\Model\SwitchServerFlowSubmitFileToFolderBodyWrapper $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiSwitchServerFlowSubmitFileToFolderAsyncWithHttpInfo($switch_server_id, $flow_id, $element_id, $file_name, $body)
    {
        $returnType = 'object';
        $request = $this->restApiSwitchServerFlowSubmitFileToFolderRequest($switch_server_id, $flow_id, $element_id, $file_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiSwitchServerFlowSubmitFileToFolder'
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     * @param  string $element_id  (required)
     * @param  string $file_name  (required)
     * @param  \Swagger\Client\Model\SwitchServerFlowSubmitFileToFolderBodyWrapper $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiSwitchServerFlowSubmitFileToFolderRequest($switch_server_id, $flow_id, $element_id, $file_name, $body)
    {
        // verify the required parameter 'switch_server_id' is set
        if ($switch_server_id === null || (is_array($switch_server_id) && count($switch_server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_server_id when calling restApiSwitchServerFlowSubmitFileToFolder'
            );
        }
        // verify the required parameter 'flow_id' is set
        if ($flow_id === null || (is_array($flow_id) && count($flow_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flow_id when calling restApiSwitchServerFlowSubmitFileToFolder'
            );
        }
        // verify the required parameter 'element_id' is set
        if ($element_id === null || (is_array($element_id) && count($element_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_id when calling restApiSwitchServerFlowSubmitFileToFolder'
            );
        }
        // verify the required parameter 'file_name' is set
        if ($file_name === null || (is_array($file_name) && count($file_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name when calling restApiSwitchServerFlowSubmitFileToFolder'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling restApiSwitchServerFlowSubmitFileToFolder'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/switchservers/{switchServerID}/flows/{flowID}/folder/{elementID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($file_name !== null) {
            $queryParams['fileName'] = ObjectSerializer::toQueryValue($file_name);
        }

        // path params
        if ($switch_server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchServerID' . '}',
                ObjectSerializer::toPathValue($switch_server_id),
                $resourcePath
            );
        }
        // path params
        if ($flow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'flowID' . '}',
                ObjectSerializer::toPathValue($flow_id),
                $resourcePath
            );
        }
        // path params
        if ($element_id !== null) {
            $resourcePath = str_replace(
                '{' . 'elementID' . '}',
                ObjectSerializer::toPathValue($element_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiSwitchServerFlowSubmitFileToSubmitPoint
     *
     * SwitchServerFlowSubmitFileToSubmitPoint
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     * @param  string $element_id  (required)
     * @param  string $file_name  (required)
     * @param  \Swagger\Client\Model\SwitchServerFlowSubmitFileToSubmitPointBodyWrapper $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiSwitchServerFlowSubmitFileToSubmitPoint($switch_server_id, $flow_id, $element_id, $file_name, $body)
    {
        list($response) = $this->restApiSwitchServerFlowSubmitFileToSubmitPointWithHttpInfo($switch_server_id, $flow_id, $element_id, $file_name, $body);
        return $response;
    }

    /**
     * Operation restApiSwitchServerFlowSubmitFileToSubmitPointWithHttpInfo
     *
     * SwitchServerFlowSubmitFileToSubmitPoint
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     * @param  string $element_id  (required)
     * @param  string $file_name  (required)
     * @param  \Swagger\Client\Model\SwitchServerFlowSubmitFileToSubmitPointBodyWrapper $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiSwitchServerFlowSubmitFileToSubmitPointWithHttpInfo($switch_server_id, $flow_id, $element_id, $file_name, $body)
    {
        $returnType = 'object';
        $request = $this->restApiSwitchServerFlowSubmitFileToSubmitPointRequest($switch_server_id, $flow_id, $element_id, $file_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiSwitchServerFlowSubmitFileToSubmitPointAsync
     *
     * SwitchServerFlowSubmitFileToSubmitPoint
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     * @param  string $element_id  (required)
     * @param  string $file_name  (required)
     * @param  \Swagger\Client\Model\SwitchServerFlowSubmitFileToSubmitPointBodyWrapper $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiSwitchServerFlowSubmitFileToSubmitPointAsync($switch_server_id, $flow_id, $element_id, $file_name, $body)
    {
        return $this->restApiSwitchServerFlowSubmitFileToSubmitPointAsyncWithHttpInfo($switch_server_id, $flow_id, $element_id, $file_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiSwitchServerFlowSubmitFileToSubmitPointAsyncWithHttpInfo
     *
     * SwitchServerFlowSubmitFileToSubmitPoint
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     * @param  string $element_id  (required)
     * @param  string $file_name  (required)
     * @param  \Swagger\Client\Model\SwitchServerFlowSubmitFileToSubmitPointBodyWrapper $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiSwitchServerFlowSubmitFileToSubmitPointAsyncWithHttpInfo($switch_server_id, $flow_id, $element_id, $file_name, $body)
    {
        $returnType = 'object';
        $request = $this->restApiSwitchServerFlowSubmitFileToSubmitPointRequest($switch_server_id, $flow_id, $element_id, $file_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiSwitchServerFlowSubmitFileToSubmitPoint'
     *
     * @param  string $switch_server_id  (required)
     * @param  string $flow_id  (required)
     * @param  string $element_id  (required)
     * @param  string $file_name  (required)
     * @param  \Swagger\Client\Model\SwitchServerFlowSubmitFileToSubmitPointBodyWrapper $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiSwitchServerFlowSubmitFileToSubmitPointRequest($switch_server_id, $flow_id, $element_id, $file_name, $body)
    {
        // verify the required parameter 'switch_server_id' is set
        if ($switch_server_id === null || (is_array($switch_server_id) && count($switch_server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_server_id when calling restApiSwitchServerFlowSubmitFileToSubmitPoint'
            );
        }
        // verify the required parameter 'flow_id' is set
        if ($flow_id === null || (is_array($flow_id) && count($flow_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flow_id when calling restApiSwitchServerFlowSubmitFileToSubmitPoint'
            );
        }
        // verify the required parameter 'element_id' is set
        if ($element_id === null || (is_array($element_id) && count($element_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_id when calling restApiSwitchServerFlowSubmitFileToSubmitPoint'
            );
        }
        // verify the required parameter 'file_name' is set
        if ($file_name === null || (is_array($file_name) && count($file_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name when calling restApiSwitchServerFlowSubmitFileToSubmitPoint'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling restApiSwitchServerFlowSubmitFileToSubmitPoint'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/switchservers/{switchServerID}/flows/{flowID}/submitpoint/{elementID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($file_name !== null) {
            $queryParams['fileName'] = ObjectSerializer::toQueryValue($file_name);
        }

        // path params
        if ($switch_server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchServerID' . '}',
                ObjectSerializer::toPathValue($switch_server_id),
                $resourcePath
            );
        }
        // path params
        if ($flow_id !== null) {
            $resourcePath = str_replace(
                '{' . 'flowID' . '}',
                ObjectSerializer::toPathValue($flow_id),
                $resourcePath
            );
        }
        // path params
        if ($element_id !== null) {
            $resourcePath = str_replace(
                '{' . 'elementID' . '}',
                ObjectSerializer::toPathValue($element_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiSwitchServerGetFlowList
     *
     * SwitchServerGetFlowList
     *
     * @param  string $switch_server_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiSwitchServerGetFlowList($switch_server_id)
    {
        list($response) = $this->restApiSwitchServerGetFlowListWithHttpInfo($switch_server_id);
        return $response;
    }

    /**
     * Operation restApiSwitchServerGetFlowListWithHttpInfo
     *
     * SwitchServerGetFlowList
     *
     * @param  string $switch_server_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiSwitchServerGetFlowListWithHttpInfo($switch_server_id)
    {
        $returnType = 'object';
        $request = $this->restApiSwitchServerGetFlowListRequest($switch_server_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiSwitchServerGetFlowListAsync
     *
     * SwitchServerGetFlowList
     *
     * @param  string $switch_server_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiSwitchServerGetFlowListAsync($switch_server_id)
    {
        return $this->restApiSwitchServerGetFlowListAsyncWithHttpInfo($switch_server_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiSwitchServerGetFlowListAsyncWithHttpInfo
     *
     * SwitchServerGetFlowList
     *
     * @param  string $switch_server_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiSwitchServerGetFlowListAsyncWithHttpInfo($switch_server_id)
    {
        $returnType = 'object';
        $request = $this->restApiSwitchServerGetFlowListRequest($switch_server_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiSwitchServerGetFlowList'
     *
     * @param  string $switch_server_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiSwitchServerGetFlowListRequest($switch_server_id)
    {
        // verify the required parameter 'switch_server_id' is set
        if ($switch_server_id === null || (is_array($switch_server_id) && count($switch_server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_server_id when calling restApiSwitchServerGetFlowList'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/switchservers/{switchServerID}/flows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($switch_server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchServerID' . '}',
                ObjectSerializer::toPathValue($switch_server_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiSwitchServerTestConnection
     *
     * SwitchServerTestConnection
     *
     * @param  string $url URL to the Switch Server (eg: https://localhost:51008/ ) (required)
     * @param  string $user_name User name to log in with (required)
     * @param  string $user_pw user password to log in with (optional)
     * @param  string $oem_key OEM key for SDK (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiSwitchServerTestConnection($url, $user_name, $user_pw = null, $oem_key = null)
    {
        list($response) = $this->restApiSwitchServerTestConnectionWithHttpInfo($url, $user_name, $user_pw, $oem_key);
        return $response;
    }

    /**
     * Operation restApiSwitchServerTestConnectionWithHttpInfo
     *
     * SwitchServerTestConnection
     *
     * @param  string $url URL to the Switch Server (eg: https://localhost:51008/ ) (required)
     * @param  string $user_name User name to log in with (required)
     * @param  string $user_pw user password to log in with (optional)
     * @param  string $oem_key OEM key for SDK (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiSwitchServerTestConnectionWithHttpInfo($url, $user_name, $user_pw = null, $oem_key = null)
    {
        $returnType = 'object';
        $request = $this->restApiSwitchServerTestConnectionRequest($url, $user_name, $user_pw, $oem_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiSwitchServerTestConnectionAsync
     *
     * SwitchServerTestConnection
     *
     * @param  string $url URL to the Switch Server (eg: https://localhost:51008/ ) (required)
     * @param  string $user_name User name to log in with (required)
     * @param  string $user_pw user password to log in with (optional)
     * @param  string $oem_key OEM key for SDK (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiSwitchServerTestConnectionAsync($url, $user_name, $user_pw = null, $oem_key = null)
    {
        return $this->restApiSwitchServerTestConnectionAsyncWithHttpInfo($url, $user_name, $user_pw, $oem_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiSwitchServerTestConnectionAsyncWithHttpInfo
     *
     * SwitchServerTestConnection
     *
     * @param  string $url URL to the Switch Server (eg: https://localhost:51008/ ) (required)
     * @param  string $user_name User name to log in with (required)
     * @param  string $user_pw user password to log in with (optional)
     * @param  string $oem_key OEM key for SDK (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiSwitchServerTestConnectionAsyncWithHttpInfo($url, $user_name, $user_pw = null, $oem_key = null)
    {
        $returnType = 'object';
        $request = $this->restApiSwitchServerTestConnectionRequest($url, $user_name, $user_pw, $oem_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiSwitchServerTestConnection'
     *
     * @param  string $url URL to the Switch Server (eg: https://localhost:51008/ ) (required)
     * @param  string $user_name User name to log in with (required)
     * @param  string $user_pw user password to log in with (optional)
     * @param  string $oem_key OEM key for SDK (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiSwitchServerTestConnectionRequest($url, $user_name, $user_pw = null, $oem_key = null)
    {
        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling restApiSwitchServerTestConnection'
            );
        }
        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling restApiSwitchServerTestConnection'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/switchservers/testconnection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($url !== null) {
            $queryParams['url'] = ObjectSerializer::toQueryValue($url);
        }
        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($user_pw !== null) {
            $queryParams['userPW'] = ObjectSerializer::toQueryValue($user_pw);
        }
        // query params
        if ($oem_key !== null) {
            $queryParams['oemKey'] = ObjectSerializer::toQueryValue($oem_key);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiXinetExecutePortalDICall
     *
     * XinetExecutePortalDICall
     *
     * @param  string $xinet_server_id The ID of the server settings (required)
     * @param  string $call_id Multiple calls can be made at the same time in the Editor. The callID is returned in the result so the editor knows which Callback to call (required)
     * @param  string $arguments The arguments to the portalDI application (eg: \&quot;action&#x3D;showkywdperms\&quot;) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiXinetExecutePortalDICall($xinet_server_id, $call_id, $arguments = null)
    {
        list($response) = $this->restApiXinetExecutePortalDICallWithHttpInfo($xinet_server_id, $call_id, $arguments);
        return $response;
    }

    /**
     * Operation restApiXinetExecutePortalDICallWithHttpInfo
     *
     * XinetExecutePortalDICall
     *
     * @param  string $xinet_server_id The ID of the server settings (required)
     * @param  string $call_id Multiple calls can be made at the same time in the Editor. The callID is returned in the result so the editor knows which Callback to call (required)
     * @param  string $arguments The arguments to the portalDI application (eg: \&quot;action&#x3D;showkywdperms\&quot;) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiXinetExecutePortalDICallWithHttpInfo($xinet_server_id, $call_id, $arguments = null)
    {
        $returnType = 'object';
        $request = $this->restApiXinetExecutePortalDICallRequest($xinet_server_id, $call_id, $arguments);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiXinetExecutePortalDICallAsync
     *
     * XinetExecutePortalDICall
     *
     * @param  string $xinet_server_id The ID of the server settings (required)
     * @param  string $call_id Multiple calls can be made at the same time in the Editor. The callID is returned in the result so the editor knows which Callback to call (required)
     * @param  string $arguments The arguments to the portalDI application (eg: \&quot;action&#x3D;showkywdperms\&quot;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiXinetExecutePortalDICallAsync($xinet_server_id, $call_id, $arguments = null)
    {
        return $this->restApiXinetExecutePortalDICallAsyncWithHttpInfo($xinet_server_id, $call_id, $arguments)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiXinetExecutePortalDICallAsyncWithHttpInfo
     *
     * XinetExecutePortalDICall
     *
     * @param  string $xinet_server_id The ID of the server settings (required)
     * @param  string $call_id Multiple calls can be made at the same time in the Editor. The callID is returned in the result so the editor knows which Callback to call (required)
     * @param  string $arguments The arguments to the portalDI application (eg: \&quot;action&#x3D;showkywdperms\&quot;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiXinetExecutePortalDICallAsyncWithHttpInfo($xinet_server_id, $call_id, $arguments = null)
    {
        $returnType = 'object';
        $request = $this->restApiXinetExecutePortalDICallRequest($xinet_server_id, $call_id, $arguments);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiXinetExecutePortalDICall'
     *
     * @param  string $xinet_server_id The ID of the server settings (required)
     * @param  string $call_id Multiple calls can be made at the same time in the Editor. The callID is returned in the result so the editor knows which Callback to call (required)
     * @param  string $arguments The arguments to the portalDI application (eg: \&quot;action&#x3D;showkywdperms\&quot;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiXinetExecutePortalDICallRequest($xinet_server_id, $call_id, $arguments = null)
    {
        // verify the required parameter 'xinet_server_id' is set
        if ($xinet_server_id === null || (is_array($xinet_server_id) && count($xinet_server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xinet_server_id when calling restApiXinetExecutePortalDICall'
            );
        }
        // verify the required parameter 'call_id' is set
        if ($call_id === null || (is_array($call_id) && count($call_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $call_id when calling restApiXinetExecutePortalDICall'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/xinetservers/{xinetServerID}/calls/{callID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($arguments !== null) {
            $queryParams['arguments'] = ObjectSerializer::toQueryValue($arguments);
        }

        // path params
        if ($xinet_server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'xinetServerID' . '}',
                ObjectSerializer::toPathValue($xinet_server_id),
                $resourcePath
            );
        }
        // path params
        if ($call_id !== null) {
            $resourcePath = str_replace(
                '{' . 'callID' . '}',
                ObjectSerializer::toPathValue($call_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiXinetSetCurrentCredentials
     *
     * XinetSetCurrentCredentials
     *
     * @param  string $user_name The name of the user to simulate (required)
     * @param  string $user_pw The password to log in with (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiXinetSetCurrentCredentials($user_name, $user_pw)
    {
        list($response) = $this->restApiXinetSetCurrentCredentialsWithHttpInfo($user_name, $user_pw);
        return $response;
    }

    /**
     * Operation restApiXinetSetCurrentCredentialsWithHttpInfo
     *
     * XinetSetCurrentCredentials
     *
     * @param  string $user_name The name of the user to simulate (required)
     * @param  string $user_pw The password to log in with (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiXinetSetCurrentCredentialsWithHttpInfo($user_name, $user_pw)
    {
        $returnType = 'object';
        $request = $this->restApiXinetSetCurrentCredentialsRequest($user_name, $user_pw);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiXinetSetCurrentCredentialsAsync
     *
     * XinetSetCurrentCredentials
     *
     * @param  string $user_name The name of the user to simulate (required)
     * @param  string $user_pw The password to log in with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiXinetSetCurrentCredentialsAsync($user_name, $user_pw)
    {
        return $this->restApiXinetSetCurrentCredentialsAsyncWithHttpInfo($user_name, $user_pw)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiXinetSetCurrentCredentialsAsyncWithHttpInfo
     *
     * XinetSetCurrentCredentials
     *
     * @param  string $user_name The name of the user to simulate (required)
     * @param  string $user_pw The password to log in with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiXinetSetCurrentCredentialsAsyncWithHttpInfo($user_name, $user_pw)
    {
        $returnType = 'object';
        $request = $this->restApiXinetSetCurrentCredentialsRequest($user_name, $user_pw);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiXinetSetCurrentCredentials'
     *
     * @param  string $user_name The name of the user to simulate (required)
     * @param  string $user_pw The password to log in with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiXinetSetCurrentCredentialsRequest($user_name, $user_pw)
    {
        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling restApiXinetSetCurrentCredentials'
            );
        }
        // verify the required parameter 'user_pw' is set
        if ($user_pw === null || (is_array($user_pw) && count($user_pw) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_pw when calling restApiXinetSetCurrentCredentials'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/xinetservers/currentcredentials';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($user_pw !== null) {
            $queryParams['userPW'] = ObjectSerializer::toQueryValue($user_pw);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restApiXinetTestConnection
     *
     * XinetTestConnection
     *
     * @param  string $url URL to the Xinet server&#39;s portalDI application (required)
     * @param  string $user_name User name to log in with (required)
     * @param  string $user_pw user password to log in with (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restApiXinetTestConnection($url, $user_name, $user_pw)
    {
        list($response) = $this->restApiXinetTestConnectionWithHttpInfo($url, $user_name, $user_pw);
        return $response;
    }

    /**
     * Operation restApiXinetTestConnectionWithHttpInfo
     *
     * XinetTestConnection
     *
     * @param  string $url URL to the Xinet server&#39;s portalDI application (required)
     * @param  string $user_name User name to log in with (required)
     * @param  string $user_pw user password to log in with (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restApiXinetTestConnectionWithHttpInfo($url, $user_name, $user_pw)
    {
        $returnType = 'object';
        $request = $this->restApiXinetTestConnectionRequest($url, $user_name, $user_pw);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restApiXinetTestConnectionAsync
     *
     * XinetTestConnection
     *
     * @param  string $url URL to the Xinet server&#39;s portalDI application (required)
     * @param  string $user_name User name to log in with (required)
     * @param  string $user_pw user password to log in with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiXinetTestConnectionAsync($url, $user_name, $user_pw)
    {
        return $this->restApiXinetTestConnectionAsyncWithHttpInfo($url, $user_name, $user_pw)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restApiXinetTestConnectionAsyncWithHttpInfo
     *
     * XinetTestConnection
     *
     * @param  string $url URL to the Xinet server&#39;s portalDI application (required)
     * @param  string $user_name User name to log in with (required)
     * @param  string $user_pw user password to log in with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restApiXinetTestConnectionAsyncWithHttpInfo($url, $user_name, $user_pw)
    {
        $returnType = 'object';
        $request = $this->restApiXinetTestConnectionRequest($url, $user_name, $user_pw);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restApiXinetTestConnection'
     *
     * @param  string $url URL to the Xinet server&#39;s portalDI application (required)
     * @param  string $user_name User name to log in with (required)
     * @param  string $user_pw user password to log in with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restApiXinetTestConnectionRequest($url, $user_name, $user_pw)
    {
        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling restApiXinetTestConnection'
            );
        }
        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling restApiXinetTestConnection'
            );
        }
        // verify the required parameter 'user_pw' is set
        if ($user_pw === null || (is_array($user_pw) && count($user_pw) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_pw when calling restApiXinetTestConnection'
            );
        }

        $resourcePath = '/rest-api/v1.2/settings/xinetservers/testconnection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($url !== null) {
            $queryParams['url'] = ObjectSerializer::toQueryValue($url);
        }
        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($user_pw !== null) {
            $queryParams['userPW'] = ObjectSerializer::toQueryValue($user_pw);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/xml'],
                ['application/xml', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
